name: Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  test_spin:
    strategy:
      matrix:
        python_version: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12-dev"]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
      - name: Install
        run: |
          pip install -e .
          pip install pytest meson-python ninja build
      - name: Library tests
        env:
          PYTHONPATH: "."
        run: |
          pytest --pyargs spin
      - name: Patch Windows runner
        if: matrix.os == 'windows-latest'
        run: |
          Remove-Item -Path C:\Strawberry -Recurse
          Remove-Item -Path C:\ProgramData\Chocolatey\bin\gcc.exe
          Remove-Item -Path C:\msys64 -Recurse -Force
          Remove-Item -Path "C:\Program Files\LLVM" -Recurse
      - name: Functional tests (linux)
        if: matrix.os == 'ubuntu-latest'
        shell: 'script -q -e -c "bash --noprofile --norc -eo pipefail {0}"'
        env:
          TERM: xterm-256color
        run: |
          set -x
          cd example_pkg
          spin build
          spin test
          spin sdist
          spin example
          spin docs
      - name: Functional tests (other)
        if: matrix.os != 'ubuntu-latest'
        shell: bash
        run: |
          set -x
          cd example_pkg
          spin build
          spin test
          spin sdist
          spin example
